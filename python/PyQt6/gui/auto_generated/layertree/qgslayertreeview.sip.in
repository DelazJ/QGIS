/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/layertree/qgslayertreeview.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/






class QgsLayerTreeProxyModel : QSortFilterProxyModel
{
%Docstring(signature="appended")
A proxy model for :py:class:`QgsLayerTreeModel`, supporting private
layers and text filtering.

.. versionadded:: 3.18
%End

%TypeHeaderCode
#include "qgslayertreeview.h"
%End
%ConvertToSubClassCode
    if ( qobject_cast<QgsLayerTreeProxyModel *>( sipCpp ) != nullptr )
      sipType = sipType_QgsLayerTreeProxyModel;
    else
      sipType = nullptr;
%End
  public:
    QgsLayerTreeProxyModel( QgsLayerTreeModel *treeModel, QObject *parent );
%Docstring
Constructs QgsLayerTreeProxyModel with source model ``treeModel`` and a
``parent``
%End

    void setFilterText( const QString &filterText = QString() );
%Docstring
Sets filter to ``filterText``.
%End

    bool showPrivateLayers() const;
%Docstring
Returns if private layers are shown.
%End

    void setShowPrivateLayers( bool showPrivate );
%Docstring
Determines if private layers are shown.
%End

    bool hideValidLayers() const;
%Docstring
Returns if valid layers should be hidden (i.e. only invalid layers are
shown).

.. seealso:: :py:func:`setHideValidLayers`

.. versionadded:: 3.38
%End

    void setHideValidLayers( bool hideValid );
%Docstring
Sets whether valid layers should be hidden (i.e. only invalid layers are
shown).

.. seealso:: :py:func:`setHideValidLayers`

.. versionadded:: 3.38
%End

  protected:
    virtual bool filterAcceptsRow( int sourceRow, const QModelIndex &sourceParent ) const;


    virtual bool nodeShown( QgsLayerTreeNode *node ) const;
%Docstring
Returns ``True`` if the specified ``node`` should be shown.

.. versionadded:: 4.0
%End

};


class QgsLayerTreeViewBase : QTreeView
{
%Docstring(signature="appended")
Base class for QTreeView widgets which display a layer tree.

The view updates expanded state of layer tree nodes and also listens to
changes to expanded states in the layer tree.

.. warning::

   Subclasses must take care to call both :py:func:`~setLayerTreeModel` and QTreeView.setModel()
   in order to have a fully functional tree view. This is by design, as it permits use of
   a custom proxy model in the view.

.. seealso:: :py:class:`QgsLayerTreeView`

.. versionadded:: 4.0
%End

%TypeHeaderCode
#include "qgslayertreeview.h"
%End
  public:
    explicit QgsLayerTreeViewBase( QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsLayerTreeViewBase
%End
    ~QgsLayerTreeViewBase();

    void setLayerTreeModel( QgsLayerTreeModel *model );
%Docstring
Associates a layer tree model with the view.

.. warning::

   This does NOT explicitly set the view's model, and a subsequent call
   to QTreeView.setModel() must be made. This is by design, as it permits use of
   a custom proxy model in the view.

.. seealso:: :py:func:`layerTreeModel`
%End

    QgsLayerTreeModel *layerTreeModel() const;
%Docstring
Returns the associated layer tree model.

.. seealso:: :py:func:`setLayerTreeModel`
%End

    QgsLayerTreeNode *index2node( const QModelIndex &index ) const;
%Docstring
Returns the layer tree node for given view ``index``.

Returns root node for an invalid index.

Returns ``None`` if index does not refer to a layer tree node (e.g. it
is a legend node).

Unlike :py:func:`QgsLayerTreeViewBase.index2Node()`, calling this method
correctly accounts for mapping the view indexes through the view's proxy
model to the source model.

.. seealso:: :py:func:`node2index`

.. versionadded:: 3.18
%End

    QModelIndex node2index( QgsLayerTreeNode *node ) const;
%Docstring
Returns the view model index for a given ``node``.

If the ``node`` does not belong to the layer tree, the result is
undefined.

Unlike :py:func:`QgsLayerTreeModel.node2index()`, calling this method
correctly accounts for mapping the view indexes through the view's proxy
model to the source model.

.. seealso:: :py:func:`index2node`

.. versionadded:: 3.18
%End

    QModelIndex node2sourceIndex( QgsLayerTreeNode *node ) const;
%Docstring
Returns the layer tree source model index for a given ``node``.

If the ``node`` does not belong to the layer tree, the result is
undefined.

.. warning::

   The returned index belongs the underlying layer tree model, and care should be taken
   to correctly map to a proxy index if a proxy model is in use.

.. seealso:: :py:func:`node2index`

.. versionadded:: 3.18
%End

    QgsLayerTreeModelLegendNode *index2legendNode( const QModelIndex &index ) const;
%Docstring
Returns legend node for given view ``index``.

Returns ``None`` for invalid index.

Unlike :py:func:`QgsLayerTreeModel.index2legendNode()`, calling this
method correctly accounts for mapping the view indexes through the
view's proxy model to the source model.

.. versionadded:: 3.18
%End

    QgsLayerTreeNode *currentNode() const;
%Docstring
Returns the current node.

May be ``None``.
%End

    QList<QgsLayerTreeNode *> selectedNodes( bool skipInternal = false ) const;
%Docstring
Returns the list of selected layer tree nodes.

:param skipInternal: If ``True``, will ignore nodes which have an
                     ancestor in the selection

.. seealso:: :py:func:`selectedLayerNodes`

.. seealso:: :py:func:`selectedLegendNodes`

.. seealso:: :py:func:`selectedLayers`
%End

    QgsMapLayer *currentLayer() const;
%Docstring
Returns the currently selected layer, or ``None`` if no layers is
selected.

.. seealso:: :py:func:`setCurrentLayer`
%End

    QgsMapLayer *layerForIndex( const QModelIndex &index ) const;
%Docstring
Returns the map layer corresponding to a view ``index``.

This method correctly accounts for proxy models set on the tree view.

Returns ``None`` if the index does not correspond to a map layer.
%End

    QgsLayerTreeGroup *currentGroupNode() const;
%Docstring
Returns the current group node.

If a layer is the current node, the function will return the layer's
parent group.

May be ``None``.
%End

    QList<QgsLayerTreeLayer *> selectedLayerNodes() const;
%Docstring
Returns the list of selected nodes filtered to just layer nodes
(:py:class:`QgsLayerTreeLayer`).

.. seealso:: :py:func:`selectedNodes`

.. seealso:: :py:func:`selectedLayers`

.. seealso:: :py:func:`selectedLegendNodes`
%End

    QList<QgsMapLayer *> selectedLayers() const;
%Docstring
Returns the list of selected layers.

.. seealso:: :py:func:`selectedNodes`

.. seealso:: :py:func:`selectedLayerNodes`

.. seealso:: :py:func:`selectedLegendNodes`
%End

    QModelIndex legendNode2index( QgsLayerTreeModelLegendNode *legendNode );
%Docstring
Returns the view index for a given legend node.

If the legend node does not belong to the layer tree, the result is
undefined.

If the legend node belongs to the tree but it is filtered out, an
invalid model index is returned.

Unlike :py:func:`QgsLayerTreeModel.legendNode2index()`, calling this
method correctly accounts for mapping the view indexes through the
view's proxy model to the source model.

.. versionadded:: 3.18
%End

    QModelIndex legendNode2sourceIndex( QgsLayerTreeModelLegendNode *legendNode );
%Docstring
Returns the layer tree source model index for a given legend node.

If the legend node does not belong to the layer tree, the result is
undefined.

If the legend node belongs to the tree but it is filtered out, an
invalid model index is returned.

.. warning::

   The returned index belongs the underlying layer tree model, and care should be taken
   to correctly map to a proxy index if a proxy model is in use.

.. seealso:: :py:func:`legendNode2index`

.. versionadded:: 3.18
%End

    void setCurrentNode( QgsLayerTreeNode *node );
%Docstring
Sets the currently selected ``node``.

If ``node`` is ``None`` then all nodes will be deselected.

.. seealso:: :py:func:`currentNode`

.. versionadded:: 3.40
%End

    void setCurrentLayer( QgsMapLayer *layer );
%Docstring
Sets the currently selected ``layer``.

If ``layer`` is ``None`` then all layers will be deselected.

.. seealso:: :py:func:`currentLayer`
%End

    QgsLayerTreeModelLegendNode *currentLegendNode() const;
%Docstring
Gets current legend node. May be ``None`` if current node is not a
legend node.
%End

    QList<QgsLayerTreeModelLegendNode *> selectedLegendNodes() const;
%Docstring
Returns the list of selected legend nodes.

.. seealso:: :py:func:`selectedNodes`

.. seealso:: :py:func:`selectedLayerNodes`

.. versionadded:: 3.32
%End

    QList<QgsMapLayer *> selectedLayersRecursive() const;
%Docstring
Gets list of selected layers, including those that are not directly
selected, but their ancestor groups is selected. If we have a group with
two layers L1, L2 and just the group node is selected, this method
returns L1 and L2, while :py:func:`~QgsLayerTreeViewBase.selectedLayers`
returns an empty list.

.. versionadded:: 3.4
%End

  public slots:

    void expandAllNodes();
%Docstring
Enhancement of QTreeView.expandAll() that also records expanded state in
layer tree nodes
%End

    void collapseAllNodes();
%Docstring
Enhancement of QTreeView.collapseAll() that also records expanded state
in layer tree nodes
%End

  protected:
    void updateExpandedStateFromNode( QgsLayerTreeNode *node );
%Docstring
Updates the expanded state from a ``node``.
%End

    QModelIndex viewIndexToLayerTreeModelIndex( const QModelIndex &index ) const;
%Docstring
Returns the view index corresponding with a layer tree model ``index``.

This method correctly accounts for proxy models set on the tree view.

.. seealso:: :py:func:`layerTreeModelIndexToViewIndex`
%End

    QModelIndex layerTreeModelIndexToViewIndex( const QModelIndex &index ) const;
%Docstring
Returns the layer tree model index corresponding with a view ``index``.

This method correctly accounts for proxy models set on the tree view.

.. seealso:: :py:func:`viewIndexToLayerTreeModelIndex`
%End

  protected slots:

    void updateExpandedStateToNode( const QModelIndex &index );
%Docstring
Stores the expanded state to a node with matching ``index``.
%End

    void onExpandedChanged( QgsLayerTreeNode *node, bool expanded );
%Docstring
Called when the expanded state changes for a node.
%End

    void onModelReset();
%Docstring
Called when the model is reset.
%End

};


class QgsLayerTreeView : QgsLayerTreeViewBase
{
%Docstring(signature="appended")
Extends QTreeView and provides additional functionality when working
with a layer tree.

The view updates expanded state of layer tree nodes and also listens to
changes to expanded states in the layer tree.

The view keeps track of the current layer and emits a signal when the
current layer has changed.

Allows the client to specify a context menu provider with custom
actions. Also it comes with a set of default actions that can be used
when building context menu.

.. seealso:: :py:class:`QgsLayerTreeModel`
%End

%TypeHeaderCode
#include "qgslayertreeview.h"
%End
%ConvertToSubClassCode
    if ( sipCpp->inherits( "QgsLayerTreeView" ) )
      sipType = sipType_QgsLayerTreeView;
    else
      sipType = 0;
%End
  public:
    explicit QgsLayerTreeView( QWidget *parent /TransferThis/ = 0 );
%Docstring
Constructor for QgsLayerTreeView
%End
    ~QgsLayerTreeView();

    virtual void setModel( QAbstractItemModel *model );

%Docstring
Overridden :py:func:`~QgsLayerTreeView.setModel` from base class. Only
:py:class:`QgsLayerTreeModel` is an acceptable model.

.. note::

   This method automatically creates a :py:class:`QgsLayerTreeProxyModel` to use as a proxy.
%End

    void setModel( QgsLayerTreeModel *model, QgsLayerTreeProxyModel *proxyModel );
%Docstring
Sets the ``model`` and ``proxyModel`` for the view.

Use this method when a custom proxy model is required.

.. versionadded:: 4.0
%End

    QgsLayerTreeProxyModel *proxyModel() const;
%Docstring
Returns the proxy model used by the view.

This can be used to set filters controlling which layers are shown in
the view.

.. versionadded:: 3.18
%End

    QgsLayerTreeViewDefaultActions *defaultActions();
%Docstring
Gets access to the default actions that may be used with the tree view
%End

    void setMenuProvider( QgsLayerTreeViewMenuProvider *menuProvider /Transfer/ );
%Docstring
Sets provider for context menu. Takes ownership of the instance
%End
    QgsLayerTreeViewMenuProvider *menuProvider() const;
%Docstring
Returns pointer to the context menu provider. May be ``None``
%End

    void setLayerVisible( QgsMapLayer *layer, bool visible );
%Docstring
Convenience methods which sets the visible state of the specified map
``layer``.

.. seealso:: :py:func:`QgsLayerTreeNode.setItemVisibilityChecked`

.. versionadded:: 3.10
%End

    void addIndicator( QgsLayerTreeNode *node, QgsLayerTreeViewIndicator *indicator );
%Docstring
Adds an indicator to the given layer tree node. Indicators are icons
shown next to layer/group names in the layer tree view. They can be used
to show extra information with tree nodes and they allow user
interaction.

Does not take ownership of the indicator. One indicator object may be
used for multiple layer tree nodes.

.. seealso:: :py:func:`removeIndicator`

.. seealso:: :py:func:`indicators`

.. versionadded:: 3.2
%End

    void removeIndicator( QgsLayerTreeNode *node, QgsLayerTreeViewIndicator *indicator );
%Docstring
Removes a previously added indicator to a layer tree node. Does not
delete the indicator.

.. seealso:: :py:func:`addIndicator`

.. seealso:: :py:func:`indicators`

.. versionadded:: 3.2
%End

    QList<QgsLayerTreeViewIndicator *> indicators( QgsLayerTreeNode *node ) const;
%Docstring
Returns list of indicators associated with a particular layer tree node.

.. seealso:: :py:func:`addIndicator`

.. seealso:: :py:func:`removeIndicator`

.. versionadded:: 3.2
%End

    int layerMarkWidth() const;
%Docstring
Returns width of contextual menu mark, at right of layer node items.

.. seealso:: :py:func:`setLayerMarkWidth`

.. versionadded:: 3.8
%End




    bool showPrivateLayers() const;
%Docstring
Returns the show private layers status

.. versionadded:: 3.18
%End

    bool hideValidLayers() const;
%Docstring
Returns if valid layers should be hidden (i.e. only invalid layers are
shown).

.. seealso:: :py:func:`setHideValidLayers`

.. versionadded:: 3.38
%End

  public slots:
    void refreshLayerSymbology( const QString &layerId );
%Docstring
Force refresh of layer symbology. Normally not needed as the changes of
layer's renderer are monitored by the model
%End

    void setLayerMarkWidth( int width );
%Docstring
Set width of contextual menu mark, at right of layer node items.

.. seealso:: :py:func:`layerMarkWidth`

.. versionadded:: 3.8
%End

    void setMessageBar( QgsMessageBar *messageBar );
%Docstring
Set the message bar to display messages from the layer tree

.. versionadded:: 3.14
%End

    void setShowPrivateLayers( bool showPrivate );
%Docstring
Set the show private layers to ``showPrivate``

.. versionadded:: 3.18
%End

    void setHideValidLayers( bool hideValid );
%Docstring
Sets whether valid layers should be hidden (i.e. only invalid layers are
shown).

.. seealso:: :py:func:`setHideValidLayers`

.. versionadded:: 3.38
%End

  signals:
    void currentLayerChanged( QgsMapLayer *layer );
%Docstring
Emitted when a current layer is changed
%End

    void datasetsDropped( QDropEvent *event );
%Docstring
Emitted when datasets are dropped onto the layer tree view
%End

    void contextMenuAboutToShow( QMenu *menu );
%Docstring
Emitted when the context menu is about to show.

Allows customization of the menu.

.. versionadded:: 3.32
%End

  protected:
    virtual void contextMenuEvent( QContextMenuEvent *event );


    virtual void mouseDoubleClickEvent( QMouseEvent *event );

    virtual void mouseReleaseEvent( QMouseEvent *event );

    virtual void keyPressEvent( QKeyEvent *event );


    virtual void dragEnterEvent( QDragEnterEvent *event );

    virtual void dragMoveEvent( QDragMoveEvent *event );

    virtual void dropEvent( QDropEvent *event );


    virtual void resizeEvent( QResizeEvent *event );


  protected slots:

    void modelRowsInserted( const QModelIndex &index, int start, int end );
    void modelRowsRemoved();

    void onCurrentChanged();

  protected:


};


class QgsLayerTreeViewMenuProvider
{
%Docstring(signature="appended")
Implementation of this interface can be implemented to allow
:py:class:`QgsLayerTreeView` instance to provide custom context menus
(opened upon right-click).

.. seealso:: :py:class:`QgsLayerTreeView`
%End

%TypeHeaderCode
#include "qgslayertreeview.h"
%End
  public:
    virtual ~QgsLayerTreeViewMenuProvider();

    virtual QMenu *createContextMenu() = 0 /Factory/;
%Docstring
Returns a newly created menu instance (or ``None`` on error)
%End
};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/gui/layertree/qgslayertreeview.h                                 *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.py again   *
 ************************************************************************/
